wordembedding.dat <- star.dat
for (i in 1:dim(star.dat)[2]-1){
wordembedding.dat[which(star.dat[,i+1] >=1),i+1]=1
}
stars <- star.dat[,1]
wordembedding.dat <- wordembedding.dat[names(sort(words[words>summary(words)[5]], decreasing= TRUE))]
wordembedding.dat <- cbind(stars,wordembedding.dat)
wordembedding.dat$stars <- as.factor(wordembedding.dat$stars)
View(wordembedding.dat)
View(star.dat)
View(test.dat)
stars <- as.factor(test.dat$stars)
eval.dat <- as.data.frame(cbind(stars,staff,manager,breakfast,desk,parking,wall,location,bar,clean,comfortable,spacious,smell))
eval.m <- lm(stars~.,data=eval.dat)
eval.m <- multinom(stars~.,data=eval.dat)
require(nnet)
stars <- as.factor(test.dat$stars)
eval.dat <- as.data.frame(cbind(stars,staff,manager,breakfast,desk,parking,wall,location,bar,clean,comfortable,spacious,smell))
eval.m <- multinom(stars~.,data=eval.dat)
summary(eval.m)
anova(lm(stars~.,data=eval.dat))
summary(eval.m)
predict(eval.m,eval.dat)
cbind(predict(eval.m,eval.dat),stars)
table(cbind(predict(eval.m,eval.dat),stars))
table(predict(eval.m,eval.dat),stars)
1-sum(diag(table(test.pred, test.dat$Class)))/sum(table(test.pred, test.dat$Class))
table(predict(eval.m,eval.dat),stars)
1-sum(diag(table(predict(eval.m,eval.dat),stars)))/sum(table(predict(eval.m,eval.dat),stars))
table(predict(eval.m,eval.dat),stars)
sum(diag(table(predict(eval.m,eval.dat),stars)))/sum(table(predict(eval.m,eval.dat),stars))
1-sum(diag(table(predict(eval.m,eval.dat),stars)))/sum(table(predict(eval.m,eval.dat),stars))
1-sum(diag(table(predict(eval.m,eval.dat),stars)))/sum(table(predict(eval.m,eval.dat),stars))
sum(diag(table(predict(eval.m,eval.dat),stars)))/sum(table(predict(eval.m,eval.dat),stars))
q()
require(nnet)
dat <- read.csv("Data/df.csv",header=TRUE)
star.dat <- dat[,c(2,11:dim(dat)[2])]
words <- apply(star.dat[,2:dim(star.dat)[2]],2,sum)
wordembedding.dat <- star.dat
for (i in 1:dim(star.dat)[2]-1){
wordembedding.dat[which(star.dat[,i+1] >=1),i+1]=1
}
stars <- star.dat[,1]
wordembedding.dat <- wordembedding.dat[names(sort(words[words>summary(words)[5]], decreasing= TRUE))]
wordembedding.dat <- cbind(stars,wordembedding.dat)
wordembedding.dat$stars <- as.factor(wordembedding.dat$stars)
freq <- function(argument1){
ind <- argument1
total.star1 <-length(which(wordembedding.dat$stars == 1))
total.star2 <-length(which(wordembedding.dat$stars == 2))
total.star3 <-length(which(wordembedding.dat$stars == 3))
total.star4 <-length(which(wordembedding.dat$stars == 4))
total.star5 <-length(which(wordembedding.dat$stars == 5))
total.v <- c(total.star1,total.star2,total.star3,total.star4,total.star5)
freq.dat <- cbind(wordembedding.dat$stars, wordembedding.dat[,ind])
star1 <-length(which(freq.dat[,1] == 1 & freq.dat[,2] == 1))
star2 <-length(which(freq.dat[,1] == 2 & freq.dat[,2] == 1))
star3 <-length(which(freq.dat[,1] == 3 & freq.dat[,2] == 1))
star4 <-length(which(freq.dat[,1] == 4 & freq.dat[,2] == 1))
star5 <-length(which(freq.dat[,1] == 5 & freq.dat[,2] == 1))
v <- c(star1, star2, star3, star4, star5)
freq <- v/total.v
freq
}
freq.mat <- matrix(rep(NA,5),nrow=5)
for (i in 1:dim(wordembedding.dat)[2]-1){
freq.vec <- freq(colnames(wordembedding.dat)[i+1])
freq.mat <- cbind(freq.mat,freq.vec)
}
stars <- levels(as.factor(star.dat$stars_x))
freq.data <- freq.mat[,-(1:2)]
colnames(freq.data) <- names(wordembedding.dat)[-1]
freq.data <- as.data.frame(cbind(stars,freq.data))
dat$date
#1.
dat <- read.csv("summarised_data.csv",header = T)
setwd("C:/Users/hkang/Desktop/605Project/Statistic605-Project")
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat$date
dat$block_date
sort(dat$block_date)
sort(as.Date(dat$block_date))
as.Date(dat$block_date)
#1.
dat <- read.csv("summarised_data.csv",header = T)
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
diff.day<-c()
diff.hour<-c()
diff.min<-c()
diff.sec<-c()
for (i in 1:dim(date.dat)[1]-1){
diff.day[i] <- as.Date(date.dat$date[i+1], format="%m/%d/%Y")-as.Date(date.dat$date[i], format="%m/%d/%Y")
}
for (i in 1:dim(date.dat)[1]-1){
diff.hour[i] <- date.dat$hour[i+1]-date.dat$hour[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.min[i] <- date.dat$minute[i+1]-date.dat$minute[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.sec[i] <- date.dat$second[i+1]-date.dat$second[i]
}
diff.sec
diff.min
diff.hour
#1.
dat <- read.csv("summarised_data.csv",header = T)
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
diff.day<-c()
diff.hour<-c()
diff.min<-c()
diff.sec<-c()
for (i in 1:dim(date.dat)[1]-1){
diff.day[i] <- as.Date(date.dat$date[i+1], format="%m/%d/%Y")-as.Date(date.dat$date[i], format="%m/%d/%Y")
}
for (i in 1:dim(date.dat)[1]-1){
diff.hour[i] <- date.dat$hour[i+1]-date.dat$hour[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.min[i] <- date.dat$minute[i+1]-date.dat$minute[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.sec[i] <- date.dat$second[i+1]-date.dat$second[i]
}
for(i in 1:length(diff.day)){
if(diff.sec[i]<0){
diff.min[i] <- diff.min[i]-1
diff.sec[i] <- diff.sec[i]+60
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
else{
diff.min[i] <- diff.min[i]
diff.sec[i] <- diff.sec[i]
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
}
cbind(diff.day,diff.hour,diff.min,diff.sec)
dat$Time
sort(dat$Time)
sort_index <- which(sort(dat$Time))
which(dat$Time==sort(dat$Time))
which(dat$Time==sort(dat$Time))[1660:1700]
order(dat$Time)
order(dat$Time)[1670:1675]
order(dat$Time)[1660:1675]
dat$Time
dat$Time[1660:1675]
order(dat$Time)[1660:1690]
dat <- dat[order(dat$Time)[1660:1690],]
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time)[1660:1690],]
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
diff.day<-c()
diff.hour<-c()
diff.min<-c()
diff.sec<-c()
for (i in 1:dim(date.dat)[1]-1){
diff.day[i] <- as.Date(date.dat$date[i+1], format="%m/%d/%Y")-as.Date(date.dat$date[i], format="%m/%d/%Y")
}
for (i in 1:dim(date.dat)[1]-1){
diff.hour[i] <- date.dat$hour[i+1]-date.dat$hour[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.min[i] <- date.dat$minute[i+1]-date.dat$minute[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.sec[i] <- date.dat$second[i+1]-date.dat$second[i]
}
for(i in 1:length(diff.day)){
if(diff.sec[i]<0){
diff.min[i] <- diff.min[i]-1
diff.sec[i] <- diff.sec[i]+60
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
else{
diff.min[i] <- diff.min[i]
diff.sec[i] <- diff.sec[i]
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
}
cbind(diff.day,diff.hour,diff.min,diff.sec)
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time),]
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
diff.day<-c()
diff.hour<-c()
diff.min<-c()
diff.sec<-c()
for (i in 1:dim(date.dat)[1]-1){
diff.day[i] <- as.Date(date.dat$date[i+1], format="%m/%d/%Y")-as.Date(date.dat$date[i], format="%m/%d/%Y")
}
for (i in 1:dim(date.dat)[1]-1){
diff.hour[i] <- date.dat$hour[i+1]-date.dat$hour[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.min[i] <- date.dat$minute[i+1]-date.dat$minute[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.sec[i] <- date.dat$second[i+1]-date.dat$second[i]
}
for(i in 1:length(diff.day)){
if(diff.sec[i]<0){
diff.min[i] <- diff.min[i]-1
diff.sec[i] <- diff.sec[i]+60
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
else{
diff.min[i] <- diff.min[i]
diff.sec[i] <- diff.sec[i]
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
}
cbind(diff.day,diff.hour,diff.min,diff.sec)
View(dat)
which(diff.day < 0)
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time),]
diff.sec<-c()
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time),]
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block
dat$Height
dat$Height[1000:2000]
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
index_repeated_block
date.dat
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time),]
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
date.dat <- data.frame(block = levels(as.factor(dat$Height)), date=dat$block_date[index_repeated_block], hour=tapply(dat$block_hour,dat$Height,mean), minute=tapply(dat$block_minute,dat$Height,mean), second=tapply(dat$block_second,dat$Height,mean))
View(date.dat)
index_repeated_block
#1.
dat <- read.csv("summarised_data.csv",header = T)
dat <- dat[order(dat$Time),]
average <- mean(dat$trans_num)
num_transaction_block <- tapply(dat$trans_per_block,dat$Height,mean)
num_quantity_block <- tapply(dat$total_btc_per_block,dat$Height,mean)
index_repeated_block<-c()
for(i in 2:dim(dat)[1]){
if(dat$Height[i-1]!=dat$Height[i]|i==2){
index_repeated_block[i]<-i
}else{
index_repeated_block[i]<-0
}
}
index_repeated_block <- index_repeated_block[-which(index_repeated_block==0|is.na(index_repeated_block))]
index_repeated_block
date.dat <- data.frame(block = dat$Height[index_repeated_block], date=dat$block_date[index_repeated_block], hour=dat$block_hour[index_repeated_block], minute=dat$block_minute[index_repeated_block], second=dat$block_second[index_repeated_block])
View(date.dat)
diff.day<-c()
diff.hour<-c()
diff.min<-c()
diff.sec<-c()
for (i in 1:dim(date.dat)[1]-1){
diff.day[i] <- as.Date(date.dat$date[i+1], format="%m/%d/%Y")-as.Date(date.dat$date[i], format="%m/%d/%Y")
}
for (i in 1:dim(date.dat)[1]-1){
diff.hour[i] <- date.dat$hour[i+1]-date.dat$hour[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.min[i] <- date.dat$minute[i+1]-date.dat$minute[i]
}
for (i in 1:dim(date.dat)[1]-1){
diff.sec[i] <- date.dat$second[i+1]-date.dat$second[i]
}
for(i in 1:length(diff.day)){
if(diff.sec[i]<0){
diff.min[i] <- diff.min[i]-1
diff.sec[i] <- diff.sec[i]+60
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
else{
diff.min[i] <- diff.min[i]
diff.sec[i] <- diff.sec[i]
if(diff.min[i]<0){
diff.hour[i] <- diff.hour[i]-1
diff.min[i] <- diff.min[i]+60
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}}
else{
diff.hour[i] <- diff.hour[i]
diff.min[i] <- diff.min[i]
if(diff.hour[i]<0){
diff.day[i] <- diff.day[i]-1
diff.hour[i] <- diff.hour[i]+24}
else{
diff.day[i] <- diff.day[i]
diff.hour[i] <- diff.hour[i]
}
}}
}
cbind(diff.day,diff.hour,diff.min,diff.sec)
level[]which(diff.day < 0)
which(diff.day < 0)
